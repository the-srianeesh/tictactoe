!DOCTYPE html
html lang=en
head
    meta charset=UTF-8
    meta name=viewport content=width=device-width, initial-scale=1.0
    titleTic Tac Toetitle
    style
        body {
            display flex;
            justify-content center;
            align-items center;
            height 100vh;
            margin 0;
            font-family Arial, sans-serif;
            background-color #f0f0f0;
        }

        .container {
            text-align center;
        }

        h1 {
            margin-bottom 20px;
        }

        .board {
            display grid;
            grid-template-columns repeat(3, 100px);
            grid-template-rows repeat(3, 100px);
            gap 5px;
        }

        .cell {
            display flex;
            justify-content center;
            align-items center;
            width 100px;
            height 100px;
            background-color #fff;
            border 2px solid #000;
            font-size 2em;
            cursor pointer;
        }

        .status {
            margin-top 20px;
            font-size 1.2em;
        }

        button {
            margin-top 20px;
            padding 10px 20px;
            font-size 1em;
            cursor pointer;
        }

        .cell.x {
            color red;
        }

        .cell.o {
            color blue;
        }
    style
head
body
    div class=container
        h1Tic Tac Toeh1
        div class=board id=board
            div class=cell data-index=0div
            div class=cell data-index=1div
            div class=cell data-index=2div
            div class=cell data-index=3div
            div class=cell data-index=4div
            div class=cell data-index=5div
            div class=cell data-index=6div
            div class=cell data-index=7div
            div class=cell data-index=8div
        div
        div class=status id=statusdiv
        button id=restartButtonRestartbutton
    div
    script
        const cells = document.querySelectorAll('.cell');
        const statusDisplay = document.getElementById('status');
        const restartButton = document.getElementById('restartButton');

        let currentPlayer = 'X';
        let gameState = ['', '', '', '', '', '', '', '', ''];
        let gameActive = true;

        const winningConditions = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        const handleCellPlayed = (clickedCell, clickedCellIndex, player) = {
            gameState[clickedCellIndex] = player;
            clickedCell.innerHTML = player;
            clickedCell.classList.add(player.toLowerCase());
        };

        const handlePlayerChange = () = {
            currentPlayer = currentPlayer === 'X'  'O'  'X';
            statusDisplay.innerHTML = `Player ${currentPlayer}'s turn`;
        };

        const handleResultValidation = (player) = {
            let roundWon = false;
            for (let i = 0; i  winningConditions.length; i++) {
                const winCondition = winningConditions[i];
                let a = gameState[winCondition[0]];
                let b = gameState[winCondition[1]];
                let c = gameState[winCondition[2]];
                if (a === ''  b === ''  c === '') {
                    continue;
                }
                if (a === b && b === c) {
                    roundWon = true;
                    break;
                }
            }

            if (roundWon) {
                statusDisplay.innerHTML = `Player ${player} wins!`;
                gameActive = false;
                return true;
            }

            let roundDraw = !gameState.includes();
            if (roundDraw) {
                statusDisplay.innerHTML = It's a draw!;
                gameActive = false;
                return true;
            }

            return false;
        };

        const handleCellClick = (event) = {
            const clickedCell = event.target;
            const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

            if (gameState[clickedCellIndex] !== ''  !gameActive) {
                return;
            }

            handleCellPlayed(clickedCell, clickedCellIndex, currentPlayer);
            if (handleResultValidation(currentPlayer)) return;

            handlePlayerChange();

             AI's Turn
            if (currentPlayer === 'O' && gameActive) {
                setTimeout(() = {
                    const bestMove = getBestMove();
                    handleCellPlayed(cells[bestMove.index], bestMove.index, currentPlayer);
                    if (handleResultValidation(currentPlayer)) return;
                    handlePlayerChange();
                }, 500);  Delay for better visualization
            }
        };

        const handleRestartGame = () = {
            currentPlayer = 'X';
            gameState = ['', '', '', '', '', '', '', '', ''];
            gameActive = true;
            statusDisplay.innerHTML = `Player ${currentPlayer}'s turn`;
            cells.forEach(cell = {
                cell.innerHTML = ;
                cell.classList.remove('x', 'o');
            });
        };

        const getBestMove = () = {
            let bestScore = -Infinity;
            let bestMove;
            for (let i = 0; i  9; i++) {
                if (gameState[i] === '') {
                    gameState[i] = 'O';
                    let score = minimax(gameState, 0, false);
                    gameState[i] = '';
                    if (score  bestScore) {
                        bestScore = score;
                        bestMove = { index i };
                    }
                }
            }
            return bestMove;
        };

        const scores = {
            X -10,
            O 10,
            tie 0
        };

        const minimax = (board, depth, isMaximizing) = {
            if (handleResultValidation('X')) {
                return scores.X - depth;
            } else if (handleResultValidation('O')) {
                return scores.O + depth;
            } else if (!gameState.includes('')) {
                return scores.tie;
            }

            if (isMaximizing) {
                let bestScore = -Infinity;
                for (let i = 0; i  9; i++) {
                    if (board[i] === '') {
                        board[i] = 'O';
                        let score = minimax(board, depth + 1, false);
                        board[i] = '';
                        bestScore = Math.max(score, bestScore);
                    }
                }
                return bestScore;
            } else {
                let bestScore = Infinity;
                for (let i = 0; i  9; i++) {
                    if (board[i] === '') {
                        board[i] = 'X';
                        let score = minimax(board, depth + 1, true);
                        board[i] = '';
                        bestScore = Math.min(score, bestScore);
                    }
                }
                return bestScore;
            }
        };

        cells.forEach(cell = cell.addEventListener('click', handleCellClick));
        restartButton.addEventListener('click', handleRestartGame);

        statusDisplay.innerHTML = `Player ${currentPlayer}'s turn`;
    </script>
</body>
</html>